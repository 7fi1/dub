
model Message {
  id              String   @id @default(cuid())
  programId       String
  partnerId       String

  senderPartnerId String? // Populated if the sender is a partner
  senderUserId    String? // Populated if the sender is a program owner/user

  text          String @db.Text

  emailId       String?
  readInApp     DateTime?
  readInEmail   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  program Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  senderPartner Partner? @relation("SenderPartner", fields: [senderPartnerId], references: [id], onDelete: Cascade)
  senderUser User? @relation(fields: [senderUserId], references: [id], onDelete: Cascade)

  @@index(programId)
  @@index(partnerId)
  @@index(senderPartnerId)
  @@index(senderUserId)
}